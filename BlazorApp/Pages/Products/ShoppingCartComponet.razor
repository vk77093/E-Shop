@page "/shoppingcart"
@inject IShoppingCartUseCase shoppingCartUsecase

<h3>ShoppingCartComponet</h3>
@if (order != null && order.LineItems != null && order.LineItems.Count > 0)
{
    <div class="row">
        <div class="col-6">
            <ul>
                @for (int i = 0; i < order.LineItems.Count; i++)
                {
                    <OrderLineItems LineItem="order.LineItems[i]"
                                    OnDeleteProduct="HandleDeleteProduct"
                                    OnUpdateProduct="HandleUpdateProduct"></OrderLineItems>
                    @if (i < order.LineItems.Count - 1)
                    {
                        <li style="list-style:none">
                            <hr />
                        </li>
                    }
                }
            </ul>
        </div>
        <div class="col">
            <!---Order Summary-->
            <OrderSummaryComp Order="order"></OrderSummaryComp>
        </div>
    </div>
}


@code {
    private Order order { get; set; }

    protected override async void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            order = await shoppingCartUsecase.Execute();
            StateHasChanged();
        }
    }
    private void HandleUpdateProduct(Order order)
    {
        this.order = order;
    }
    private void HandleDeleteProduct(Order order)
    {
        this.order = order;
    }
}
